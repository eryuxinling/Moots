{"Typealiases.html#/s:10SwiftGraph024UnweightedUniqueElementsB0a":{"name":"UnweightedUniqueElementsGraph","abstract":"<p>Undocumented</p>"},"Typealiases.html#/s:10SwiftGraph022WeightedUniqueElementsB0a":{"name":"WeightedUniqueElementsGraph","abstract":"<p>Undocumented</p>"},"Structs/WeightedEdge.html#/s:10SwiftGraph4EdgeP1uSivp":{"name":"u","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph4EdgeP1vSivp":{"name":"v","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph12WeightedEdgeV8directedSbvp":{"name":"directed","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph12WeightedEdgeV6weightxvp":{"name":"weight","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph12WeightedEdgeV1u1v8directed6weightACyxGSi_SiSbxtcfc":{"name":"init(u:v:directed:weight:)","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph12WeightedEdgeV8reversedACyxGyF":{"name":"reversed()","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:10SwiftGraph12WeightedEdgeV6Weighta":{"name":"Weight","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdge"},"Structs/WeightedEdge.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"WeightedEdge"},"Structs/UnweightedEdge.html#/s:10SwiftGraph4EdgeP1uSivp":{"name":"u","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:10SwiftGraph4EdgeP1vSivp":{"name":"v","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:10SwiftGraph14UnweightedEdgeV8directedSbvp":{"name":"directed","abstract":"<p>Undocumented</p>","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:10SwiftGraph14UnweightedEdgeV1u1v8directedACSi_SiSbtcfc":{"name":"init(u:v:directed:)","abstract":"<p>Undocumented</p>","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:10SwiftGraph14UnweightedEdgeV8reversedACyF":{"name":"reversed()","abstract":"<p>Undocumented</p>","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"UnweightedEdge"},"Structs/UnweightedEdge.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"UnweightedEdge"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV9ascending14startingValuesACyxGSb_SayxGtcfc":{"name":"init(ascending:startingValues:)","abstract":"<p>Undocumented</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV5order14startingValuesACyxGSbx_xtc_SayxGtcfc":{"name":"init(order:startingValues:)","abstract":"<p>Creates a new PriorityQueue with the given ordering.</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV5countSivp":{"name":"count","abstract":"<p>How many elements the Priority Queue stores</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV7isEmptySbvp":{"name":"isEmpty","abstract":"<p>true if and only if the Priority Queue is empty</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV4pushyyxF":{"name":"push(_:)","abstract":"<p>Add a new element onto the Priority Queue. O(lg n)</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV3popxSgyF":{"name":"pop()","abstract":"<p>Remove and return the element with the highest priority (or lowest if ascending). O(lg n)</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV6removeyyxF":{"name":"remove(_:)","abstract":"<p>Removes the first occurence of a particular item. Finds it by value comparison using ==. O(n)","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV9removeAllyyxF":{"name":"removeAll(_:)","abstract":"<p>Removes all occurences of a particular item. Finds it by value comparison using ==. O(n)","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV4peekxSgyF":{"name":"peek()","abstract":"<p>Get a look at the current highest priority item, without removing it. O(1)</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:10SwiftGraph13PriorityQueueV5clearyyF":{"name":"clear()","abstract":"<p>Eliminate all of the elements from the Priority Queue.</p>","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:St7ElementQa":{"name":"Element","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:St4next7ElementQzSgyF":{"name":"next()","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:ST8IteratorQa":{"name":"Iterator","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:ST12makeIterator0B0QzyF":{"name":"makeIterator()","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:Sl5IndexQa":{"name":"Index","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html#/s:s28CustomDebugStringConvertibleP16debugDescriptionSSvp":{"name":"debugDescription","parent_name":"PriorityQueue"},"Structs/PriorityQueue.html":{"name":"PriorityQueue","abstract":"<p>A PriorityQueue takes objects to be pushed of any type that implements Comparable."},"Structs/UnweightedEdge.html":{"name":"UnweightedEdge","abstract":"<p>A basic unweighted edge.</p>"},"Structs/WeightedEdge.html":{"name":"WeightedEdge","abstract":"<p>A weighted edge, who&rsquo;s weight subscribes to Comparable.</p>"},"Protocols/WeightedEdgeProtocol.html#/s:10SwiftGraph20WeightedEdgeProtocolP6WeightQa":{"name":"Weight","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdgeProtocol"},"Protocols/WeightedEdgeProtocol.html#/s:10SwiftGraph20WeightedEdgeProtocolP1u1v8directed6weightxSi_SiSb6WeightQztcfc":{"name":"init(u:v:directed:weight:)","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdgeProtocol"},"Protocols/WeightedEdgeProtocol.html#/s:10SwiftGraph20WeightedEdgeProtocolP6weight6WeightQzvp":{"name":"weight","abstract":"<p>Undocumented</p>","parent_name":"WeightedEdgeProtocol"},"Protocols/Edge.html#/s:10SwiftGraph4EdgeP1uSivp":{"name":"u","abstract":"<p>The origin vertex of the edge</p>","parent_name":"Edge"},"Protocols/Edge.html#/s:10SwiftGraph4EdgeP1vSivp":{"name":"v","abstract":"<p>The destination vertex of the edge</p>","parent_name":"Edge"},"Protocols/Edge.html#/s:10SwiftGraph4EdgeP8directedSbvp":{"name":"directed","abstract":"<p>Undocumented</p>","parent_name":"Edge"},"Protocols/Edge.html#/s:10SwiftGraph4EdgeP8reversedxyF":{"name":"reversed()","abstract":"<p>Undocumented</p>","parent_name":"Edge"},"Protocols/Graph.html#/s:10SwiftGraph0B0P1VQa":{"name":"V","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0P1EQa":{"name":"E","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0P8verticesSay1VQzGvp":{"name":"vertices","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0P5edgesSaySay1EQzGGvp":{"name":"edges","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0P8verticesxSay1VQzG_tcfc":{"name":"init(vertices:)","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0P7addEdge_8directedy1EQz_SbtF":{"name":"addEdge(_:directed:)","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE12detectCycles10upToLengthSaySay1VQzGGSi_tF":{"name":"detectCycles(upToLength:)","abstract":"<p>Find all of the cycles in a <code>Graph</code>, expressed as vertices.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE4Patha":{"name":"Path","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE9PathTuplea":{"name":"PathTuple","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE19detectCyclesAsEdges10upToLengthSaySay1EQzGGSi_tF":{"name":"detectCyclesAsEdges(upToLength:)","abstract":"<p>Find all of the cycles in a <code>Graph</code>, expressed as edges.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE11vertexCountSivp":{"name":"vertexCount","abstract":"<p>How many vertices are in the graph?</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE9edgeCountSivp":{"name":"edgeCount","abstract":"<p>How many edges are in the graph?</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE8edgeListSay1EQzGyF":{"name":"edgeList()","abstract":"<p>Returns a list of all the edges, undirected edges are only appended once.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE13vertexAtIndexy1VQzSiF":{"name":"vertexAtIndex(_:)","abstract":"<p>Get a vertex by its index.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE13indexOfVertexySiSg1VQzF":{"name":"indexOfVertex(_:)","abstract":"<p>Find the first occurence of a vertex if it exists.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE17neighborsForIndexySay1VQzGSiF":{"name":"neighborsForIndex(_:)","abstract":"<p>Find all of the neighbors of a vertex at a given index.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE18neighborsForVertexySay1VQzGSgAFF":{"name":"neighborsForVertex(_:)","abstract":"<p>Find all of the neighbors of a given Vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE13edgesForIndexySay1EQzGSiF":{"name":"edgesForIndex(_:)","abstract":"<p>Find all of the edges of a vertex at a given index.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE14edgesForVertexySay1EQzGSg1VQzF":{"name":"edgesForVertex(_:)","abstract":"<p>Find all of the edges of a given vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE08vertexInB00C0Sb1VQz_tF":{"name":"vertexInGraph(vertex:)","abstract":"<p>Find the first occurence of a vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE9addVertexySi1VQzF":{"name":"addVertex(_:)","abstract":"<p>Add a vertex to the graph.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE14removeAllEdges4from2to13bidirectionalySi_SiSbtF":{"name":"removeAllEdges(from:to:bidirectional:)","abstract":"<p>Removes all edges in both directions between vertices at indexes from &amp; to.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE14removeAllEdges4from2to13bidirectionaly1VQz_AISbtF":{"name":"removeAllEdges(from:to:bidirectional:)","abstract":"<p>Removes all edges in both directions between two vertices.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10removeEdgeyy1EQzF":{"name":"removeEdge(_:)","abstract":"<p>Remove the first edge found to be equal to <em>e</em></p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE19removeVertexAtIndexyySiF":{"name":"removeVertexAtIndex(_:)","abstract":"<p>Removes a vertex at a specified index, all of the edges attached to it, and renumbers the indexes of the rest of the edges.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE12removeVertexyy1VQzF":{"name":"removeVertex(_:)","abstract":"<p>Removes the first occurence of a vertex, all of the edges attached to it, and renumbers the indexes of the rest of the edges.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10edgeExistsySb1EQzF":{"name":"edgeExists(_:)","abstract":"<p>Check whether an edge is in the graph or not.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Graph"},"Protocols/Graph.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Graph"},"Protocols/Graph.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Graph"},"Protocols/Graph.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAEy1VQzSicip":{"name":"subscript(_:)","abstract":"<p>The same as vertexAtIndex() - returns the vertex at index</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE8reversedxyF":{"name":"reversed()","abstract":"<p>Returns a graph of the same type with all edges reversed.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3dfs9fromIndex8goalTest10visitOrder7reducerSiSgSi_SbSiXESay1EQzGALXESbAKXEtF":{"name":"dfs(fromIndex:goalTest:visitOrder:reducer:)","abstract":"<p>Perform a computation over the graph visiting the vertices using a","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE11traverseDfs9fromIndex8goalTest10visitOrder7reducerSiSgSi_SbSiXESay1EQzGALXESbAKXEtF":{"name":"traverseDfs(fromIndex:goalTest:visitOrder:reducer:)","abstract":"<p>Perform a computation over the graph visiting the vertices using a","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3dfs9fromIndex8goalTestSay1EQzGSi_Sb1VQzXEtF":{"name":"dfs(fromIndex:goalTest:)","abstract":"<p>Find a route from a vertex to the first that satisfies goalTest()","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3dfs4from8goalTestSay1EQzG1VQz_SbAKXEtF":{"name":"dfs(from:goalTest:)","abstract":"<p>Find a route from a vertex to the first that satisfies goalTest()","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3dfs9fromIndex02toE0Say1EQzGSi_SitF":{"name":"dfs(fromIndex:toIndex:)","abstract":"<p>Find a route from one vertex to another using a depth-first search.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3dfs4from2toSay1EQzG1VQz_AKtF":{"name":"dfs(from:to:)","abstract":"<p>Find a route from one vertex to another using a depth-first search.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10findAllDfs9fromIndex8goalTestSaySay1EQzGGSi_Sb1VQzXEtF":{"name":"findAllDfs(fromIndex:goalTest:)","abstract":"<p>Find path routes from a vertex to all others the","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10findAllDfs4from8goalTestSaySay1EQzGG1VQz_SbALXEtF":{"name":"findAllDfs(from:goalTest:)","abstract":"<p>Find path routes from a vertex to all others the","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3bfs9fromIndex8goalTest10visitOrder7reducerSiSgSi_SbSiXESay1EQzGALXESbAKXEtF":{"name":"bfs(fromIndex:goalTest:visitOrder:reducer:)","abstract":"<p>Perform a computation over the graph visiting the vertices using a","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE11traverseBfs9fromIndex8goalTest10visitOrder7reducerSiSgSi_SbSiXESay1EQzGALXESbAKXEtF":{"name":"traverseBfs(fromIndex:goalTest:visitOrder:reducer:)","abstract":"<p>Perform a computation over the graph visiting the vertices using a","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3bfs9fromIndex8goalTestSay1EQzGSi_Sb1VQzXEtF":{"name":"bfs(fromIndex:goalTest:)","abstract":"<p>Find a route from a vertex to the first that satisfies goalTest()","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3bfs4from8goalTestSay1EQzG1VQz_SbAKXEtF":{"name":"bfs(from:goalTest:)","abstract":"<p>Find a route from a vertex to the first that satisfies goalTest()","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3bfs9fromIndex02toE0Say1EQzGSi_SitF":{"name":"bfs(fromIndex:toIndex:)","abstract":"<p>Find a route from one vertex to another using a breadth-first search.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE3bfs4from2toSay1EQzG1VQz_AKtF":{"name":"bfs(from:to:)","abstract":"<p>Find a route from one vertex to another using a breadth-first search.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10findAllBfs9fromIndex8goalTestSaySay1EQzGGSi_Sb1VQzXEtF":{"name":"findAllBfs(fromIndex:goalTest:)","abstract":"<p>Find path routes from a vertex to all others the","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE10findAllBfs4from8goalTestSaySay1EQzGG1VQz_SbALXEtF":{"name":"findAllBfs(from:goalTest:)","abstract":"<p>Find path routes from a vertex to all others the","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE15edgesToVertices0C0Say1VQzGSay1EQzG_tF":{"name":"edgesToVertices(edges:)","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE15topologicalSortSay1VQzGSgyF":{"name":"topologicalSort()","abstract":"<p>Topologically sorts a <code>Graph</code> O(n)</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PAAE5isDAGSbvp":{"name":"isDAG","abstract":"<p>Is the <code>Graph</code> a directed-acyclic graph (DAG)? O(n)","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE8withPath_8directedxSay1VQzG_SbtFZ":{"name":"withPath(_:directed:)","abstract":"<p>Initialize an UnweightedGraph consisting of path.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE9withCycle_8directedxSay1VQzG_SbtFZ":{"name":"withCycle(_:directed:)","abstract":"<p>Initialize an UnweightedGraph consisting of cycle.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE03addD09fromIndex02toG08directedySi_SiSbtF":{"name":"addEdge(fromIndex:toIndex:directed:)","abstract":"<p>This is a convenience method that adds an unweighted edge.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE03addD04from2to8directedy1VQz_AMSbtF":{"name":"addEdge(from:to:directed:)","abstract":"<p>This is a convenience method that adds an unweighted, undirected edge between the first occurence of two vertices. It takes O(n) time.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE10edgeExists9fromIndex02toH0SbSi_SitF":{"name":"edgeExists(fromIndex:toIndex:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A14UnweightedEdgeV1ERtzrlE10edgeExists4from2toSb1VQz_ALtF":{"name":"edgeExists(from:to:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE1Wa":{"name":"W","abstract":"<p>Undocumented</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE28neighborsForIndexWithWeightsySay1VQz_AE_6WeightAaDPQZtGSiF":{"name":"neighborsForIndexWithWeights(_:)","abstract":"<p>Find all of the neighbors of a vertex at a given index.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE03addD09fromIndex02toH06weight8directedySi_SiAE_6WeightAaDPQZSbtF":{"name":"addEdge(fromIndex:toIndex:weight:directed:)","abstract":"<p>This is a convenience method that adds a weighted edge.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE03addD04from2to6weight8directedy1VQz_AmE_6WeightAaDPQZSbtF":{"name":"addEdge(from:to:weight:directed:)","abstract":"<p>This is a convenience method that adds a weighted edge between the first occurence of two vertices. It takes O(n) time.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE10edgeExists9fromIndex02toI010withWeightSbSi_SiAE_0L0AaDPQZtF":{"name":"edgeExists(fromIndex:toIndex:withWeight:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex with a specific weight.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE10edgeExists4from2to10withWeightSb1VQz_AlE_0K0AaDPQZtF":{"name":"edgeExists(from:to:withWeight:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex with a specific weight.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE10edgeExists9fromIndex02toI0SbSi_SitF":{"name":"edgeExists(fromIndex:toIndex:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE10edgeExists4from2toSb1VQz_AKtF":{"name":"edgeExists(from:to:)","abstract":"<p>Check whether there is an edge from one vertex to another vertex.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE7weights4from2toSayAE_6WeightAaDPQZGSi_SitF":{"name":"weights(from:to:)","abstract":"<p>Returns all the weights associated to the edges between two vertex indices.</p>","parent_name":"Graph"},"Protocols/Graph.html#/s:10SwiftGraph0B0PA2A20WeightedEdgeProtocol1ERpzrlE7weights4from2toSayAE_6WeightAaDPQZG1VQz_AOtF":{"name":"weights(from:to:)","abstract":"<p>Returns all the weights associated to the edges between two vertices.</p>","parent_name":"Graph"},"Protocols/Graph.html":{"name":"Graph","abstract":"<p>The protocol for all graphs."},"Protocols/Edge.html":{"name":"Edge","abstract":"<p>A protocol that all edges in a graph must conform to.</p>"},"Protocols/WeightedEdgeProtocol.html":{"name":"WeightedEdgeProtocol","abstract":"<p>Undocumented</p>"},"Functions.html#/s:10SwiftGraph11totalWeightyxSgSayAA12WeightedEdgeVyxGGSeRzSERzSjRzlF":{"name":"totalWeight(_:)","abstract":"<p>Find the total weight of a list of weighted edges</p>"},"Functions.html#/s:10SwiftGraph8printMST5edges5graphySayAA12WeightedEdgeVyq_GG_AA0gB0Cyxq_GtSeRzSERzSQRzSeR_SER_SjR_r0_lF":{"name":"printMST(edges:graph:)","abstract":"<p>Pretty print an edge list returned from an MST</p>"},"Functions.html#/s:10SwiftGraph25distanceArrayToVertexDict9distances5graphSDyxq_SgGSayAEG_AA08WeightedB0Cyxq_GtSeRzSERzSHRzSeR_SER_SQR_r0_lF":{"name":"distanceArrayToVertexDict(distances:graph:)","abstract":"<p>Helper function to get easier access to Dijkstra results.</p>"},"Functions.html#/s:10SwiftGraph14pathDictToPath4from2to0cD0SayAA4Edge_pGSi_SiSDySiAaF_pGtF":{"name":"pathDictToPath(from:to:pathDict:)","abstract":"<p>Takes a dictionary of edges to reach each node and returns an array of edges"},"Functions.html#/s:10SwiftGraph14pathDictToPath4from2to0cD0SayAA12WeightedEdgeVyxGGSi_SiSDySiAHGtSeRzSERzSQRzlF":{"name":"pathDictToPath(from:to:pathDict:)","abstract":"<p>Undocumented</p>"},"Enums/CompleteGraph.html#/s:10SwiftGraph08CompleteB0O5build12withVerticesAA010UnweightedB0CyxGSayxG_tFZ":{"name":"build(withVertices:)","abstract":"<p>Constructs an undirected UnweightedGraph isomorphic to a complete graph.</p>","parent_name":"CompleteGraph"},"Enums/StarGraph.html#/s:10SwiftGraph04StarB0O5build10withCenter8andLeafsAA010UnweightedB0CyxGx_SayxGtFZ":{"name":"build(withCenter:andLeafs:)","abstract":"<p>Constructs an undirected UnweightedGraph isomorphic to a star graph.</p>","parent_name":"StarGraph"},"Enums/StarGraph.html":{"name":"StarGraph","abstract":"<p>A type used to construct an UnweightedGraph with vertices of type V that is isomorphic to a star graph."},"Enums/CompleteGraph.html":{"name":"CompleteGraph","abstract":"<p>A type used to construct UnweightedGraph with vertices of type V that is isomorphic to a complete graph."},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0C8verticesSayxGvp":{"name":"vertices","abstract":"<p>Undocumented</p>","parent_name":"UnweightedGraph"},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0C5edgesSaySayAA0C4EdgeVGGvp":{"name":"edges","abstract":"<p>Undocumented</p>","parent_name":"UnweightedGraph"},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0CACyxGycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"UnweightedGraph"},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0C8verticesACyxGSayxG_tcfc":{"name":"init(vertices:)","abstract":"<p>Undocumented</p>","parent_name":"UnweightedGraph"},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0C7addEdge_8directedyAA0cE0V_SbtF":{"name":"addEdge(_:directed:)","abstract":"<p>Add an edge to the graph.</p>","parent_name":"UnweightedGraph"},"Classes/UnweightedGraph.html#/s:10SwiftGraph010UnweightedB0C9addVertexySixF":{"name":"addVertex(_:)","abstract":"<p>Add a vertex to the graph.</p>","parent_name":"UnweightedGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0C8verticesSayxGvp":{"name":"vertices","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0C5edgesSaySayq_GGvp":{"name":"edges","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CACyxq_Gycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0C8verticesACyxq_GSayxG_tcfc":{"name":"init(vertices:)","abstract":"<p>Init the Graph with vertices, but removes duplicates. O(n^2)</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0C9addVertexySixF":{"name":"addVertex(_:)","abstract":"<p>Add a vertex to the graph if no equal vertex already belongs to the Graph. O(n)</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0C7addEdge_8directedyq__SbtF":{"name":"addEdge(_:directed:)","abstract":"<p>Add an edge to the graph. Only allow the edge to be added once</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE7unionOfyACyxAEGSayAGGFZ":{"name":"unionOf(_:)","abstract":"<p>Creates a new UniqueVerticesGraph that is the union of several UniqueVerticesGraphs.</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE7unionOfyACyxAEGAGd_tFZ":{"name":"unionOf(_:)","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE8withPath_8directedACyxAEGSayxG_SbtFZ":{"name":"withPath(_:directed:)","abstract":"<p>Initialize an UniqueElementsGraph consisting of path.</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE9withCycle_8directedACyxAEGSayxG_SbtFZ":{"name":"withCycle(_:directed:)","abstract":"<p>Initialize an UniqueElementsGraph consisting of cycle.</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE13fromRecursion_12startingWithACyxAEGSayxGxXE_xtFZ":{"name":"fromRecursion(_:startingWith:)","abstract":"<p>Construct a UniqueElementsGraph by repeatedly applying a recursion function to a vertex and adding them to the graph.</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CA2A14UnweightedEdgeVRs_rlE13fromRecursion_15selectingVertex12startingWithACyxAEGSayqd__Gqd__XE_xqd__XEqd__tlFZ":{"name":"fromRecursion(_:selectingVertex:startingWith:)","abstract":"<p>Construct a UniqueElementsGraph by repeatedly applying a recursion function to some elements and adding the corresponding vertex to the graph.</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CAASHRzAA14UnweightedEdgeVRs_rlE8withPath_8directedACyxAEGSayxG_SbtFZ":{"name":"withPath(_:directed:)","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/UniqueElementsGraph.html#/s:10SwiftGraph014UniqueElementsB0CAASHRzAA14UnweightedEdgeVRs_rlE9withCycle_8directedACyxAEGSayxG_SbtFZ":{"name":"withCycle(_:directed:)","abstract":"<p>Undocumented</p>","parent_name":"UniqueElementsGraph"},"Classes/Stack.html#/s:10SwiftGraph5StackC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Undocumented</p>","parent_name":"Stack"},"Classes/Stack.html#/s:10SwiftGraph5StackC4pushyyxF":{"name":"push(_:)","abstract":"<p>Undocumented</p>","parent_name":"Stack"},"Classes/Stack.html#/s:10SwiftGraph5StackC3popxyF":{"name":"pop()","abstract":"<p>Undocumented</p>","parent_name":"Stack"},"Classes/Queue.html#/s:10SwiftGraph5QueueCACyxGycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueC7isEmptySbvp":{"name":"isEmpty","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueC4pushyyxF":{"name":"push(_:)","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueC3popxyF":{"name":"pop()","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueC5frontxvp":{"name":"front","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueC5countSivp":{"name":"count","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/Queue.html#/s:10SwiftGraph5QueueCAASQRzlE8containsySbxF":{"name":"contains(_:)","abstract":"<p>Undocumented</p>","parent_name":"Queue"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0C8verticesSayxGvp":{"name":"vertices","abstract":"<p>Undocumented</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0C5edgesSaySayAA0C4EdgeVyq_GGGvp":{"name":"edges","abstract":"<p>Undocumented</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0CACyxq_Gycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0C8verticesACyxq_GSayxG_tcfc":{"name":"init(vertices:)","abstract":"<p>Undocumented</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0C7addEdge_8directedyAA0cE0Vyq_G_SbtF":{"name":"addEdge(_:directed:)","abstract":"<p>Add an edge to the graph.</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0C9addVertexySixF":{"name":"addVertex(_:)","abstract":"<p>Add a vertex to the graph.</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0CAASLR_rlE3mst5startSayAA0C4EdgeVyq_GGSgSi_tF":{"name":"mst(start:)","abstract":"<p>Find the minimum spanning tree in a weighted graph. This is the set of edges","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0CAASLR_SjR_rlE8dijkstra4root13startDistanceSayq_SgG_SDySiAA0C4EdgeVyq_GGtSi_q_tF":{"name":"dijkstra(root:startDistance:)","abstract":"<p>Finds the shortest paths from some route vertex to every other vertex in the graph.</p>","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html#/s:10SwiftGraph08WeightedB0CAASLR_SjR_rlE8dijkstra4root13startDistanceSayq_SgG_SDySiAA0C4EdgeVyq_GGtx_q_tF":{"name":"dijkstra(root:startDistance:)","abstract":"<p>A convenience version of dijkstra() that allows the supply of the root","parent_name":"WeightedGraph"},"Classes/WeightedGraph.html":{"name":"WeightedGraph","abstract":"<p>An implementation of Graph that has convenience methods for adding and removing WeightedEdges. All added Edges should have the same generic Comparable type W as the WeightedGraph itself.</p>"},"Classes/Queue.html":{"name":"Queue","abstract":"<p>Implements a queue - helper class that uses an array internally.</p>"},"Classes/Stack.html":{"name":"Stack","abstract":"<p>Implements a stack - helper class that uses an array internally.</p>"},"Classes/UniqueElementsGraph.html":{"name":"UniqueElementsGraph","abstract":"<p>An implementation Graph that ensures there are no pairs of equal vertices and no repeated edges.</p>"},"Classes/UnweightedGraph.html":{"name":"UnweightedGraph","abstract":"<p>An implementation of Graph with some convenience methods for adding and removing UnweightedEdges. WeightedEdges may be added to an UnweightedGraph but their weights will be ignored.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}